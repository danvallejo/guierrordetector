We thank the reviewers for their comments.

We agree that our technique is simple -- but we view elegance as a positive
rather than a negative!  Part of our contribution is the observation that
an approach, that is easy to understand and to verify, is also effective
in solving an important problem that plagues real developers.

A reviewer asked why breadth/depth first search is not sound.  The reason
is that breadth/depth first search visits every node, but does not traverse
every path to visit that node.  For example, suppose that there exists some
fault-revealing path between entry node E and UI-access node U.  A sound
algorithm is one that reports some fault-revealing path between entry node
E and UI-access node U.  An unsound algorithm might report an infeasible
(and therefore non-fault-revealing) path between the nodes.  Figure 8 gives
a concrete example:  for the graph of Figure 8(b), a shortest-path
(depth-first) algorithm does report a path between entry() and uiAcc(), but
not one that reveals the problem.  We can clarify this issue in the paper.

With regard to applicability and generalization, we agree that we have
applied our technique to one specific (but important) problem.  There is a
rich history of testing and analysis problems being cast as reachability
(the work of Tom Reps is one example).  We believe that other problems,
such as detecting security vulnerabilities, can also be formulated as path
reachability.  We have not done so in the current paper.